#ifndef merton_cuh
#define merton_cuh
//
//
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>
#include "complex.cuh"
//
//
__device__ double valuemerton(double S,double X,double tau,double r,double sigma,double lambda,double muj,double sigmaj,double t)
{
	 double murn = (r - 0.5*sigma*sigma - lambda*(exp(muj + 0.5*sigmaj*sigmaj) - 1.0))*tau;
         double sigmasqrn = sigma*sigma*tau;
         Complex<double> c1 = Complex<double>(-0.5*sigmasqrn*t*t,murn*t).exponential();
         Complex<double> ct = lambda*tau*(Complex<double>(-0.5*sigmaj*sigmaj*t*t,muj*t).exponential() - 1.0);
         Complex<double> c2 = ct.exponential();
         Complex<double> cf = c1*c2;
         Complex<double> num = cf*Complex<double>(0.0,-t*log(X/S)).exponential();
         Complex<double> den = Complex<double>(t*t,t);
         return (num/den).real();
}
//
//
__device__ double integratemerton(double S,double X,double tau,double r,double sigma,double lambda,double muj,double sigmaj)
{
	const double Root[201] = {0.999928,0.999928,0.999621,0.999069,0.998271,0.997229,0.995941,0.994409,0.992633,0.990613,0.98835,0.985845,0.983097,0.980108,0.976878,0.973409,0.9697,0.965754,0.96157,0.95715,0.952496,0.947607,0.942486,0.937133,0.931551,0.925739,0.919701,0.913436,0.906948,0.900236,0.893304,0.886152,0.878783,0.871198,0.863399,0.855389,0.847168,0.838739,0.830104,0.821266,0.812226,0.802986,0.79355,0.783918,0.774094,0.76408,0.753879,0.743492,0.732923,0.722174,0.711247,0.700146,0.688873,0.677431,0.665823,0.654051,0.642119,0.630028,0.617784,0.605387,0.592842,0.580152,0.567319,0.554347,0.541238,0.527997,0.514626,0.501129,0.487509,0.473769,0.459912,0.445943,0.431865,0.41768,0.403393,0.389006,0.374525,0.359951,0.345289,0.330542,0.315714,0.300809,0.285829,0.27078,0.255664,0.240485,0.225247,0.209954,0.194609,0.179217,0.163781,0.148304,0.132791,0.117245,0.101671,0.0860715,0.0704509,0.0548131,0.0391618,0.023501,0.00783429,-0.00783429,-0.023501,-0.0391618,-0.0548131,-0.0704509,-0.0860715,-0.101671,-0.117245,-0.132791,-0.148304,-0.163781,-0.179217,-0.194609,-0.209954,-0.225247,-0.240485,-0.255664,-0.27078,-0.285829,-0.300809,-0.315714,-0.330542,-0.345289,-0.359951,-0.374525,-0.389006,-0.403393,-0.41768,-0.431865,-0.445943,-0.459912,-0.473769,-0.487509,-0.501129,-0.514626,-0.527997,-0.541238,-0.554347,-0.567319,-0.580152,-0.592842,-0.605387,-0.617784,-0.630028,-0.642119,-0.654051,-0.665823,-0.677431,-0.688873,-0.700146,-0.711247,-0.722174,-0.732923,-0.743492,-0.753879,-0.76408,-0.774094,-0.783918,-0.79355,-0.802986,-0.812226,-0.821266,-0.830104,-0.838739,-0.847168,-0.855389,-0.863399,-0.871198,-0.878783,-0.886152,-0.893304,-0.900236,-0.906948,-0.913436,-0.919701,-0.925739,-0.931551,-0.937133,-0.942486,-0.947607,-0.952496,-0.95715,-0.96157,-0.965754,-0.9697,-0.973409,-0.976878,-0.980108,-0.983097,-0.985845,-0.98835,-0.990613,-0.992633,-0.994409,-0.995941,-0.997229,-0.998271,-0.999069,-0.999621,-0.999928};
	//
	const double Weight[201] = {0.00018459,0.00018459,0.000429647,0.000674961,0.00092014,0.0011651,0.00140978,0.00165411,0.00189803,0.00214149,0.00238443,0.00262677,0.00286848,0.00310948,0.00334971,0.00358912,0.00382766,0.00406525,0.00430184,0.00453738,0.00477181,0.00500506,0.00523708,0.00546782,0.00569722,0.00592521,0.00615176,0.00637679,0.00660026,0.0068221,0.00704227,0.00726072,0.00747738,0.0076922,0.00790514,0.00811613,0.00832513,0.00853209,0.00873696,0.00893968,0.0091402,0.00933848,0.00953447,0.00972811,0.00991937,0.0101082,0.0102945,0.0104784,0.0106596,0.0108382,0.0110142,0.0111874,0.011358,0.0115257,0.0116906,0.0118526,0.0120117,0.0121679,0.0123211,0.0124712,0.0126183,0.0127623,0.0129032,0.0130409,0.0131753,0.0133066,0.0134346,0.0135593,0.0136807,0.0137987,0.0139133,0.0140245,0.0141322,0.0142365,0.0143373,0.0144346,0.0145283,0.0146185,0.0147051,0.014788,0.0148673,0.014943,0.015015,0.0150834,0.015148,0.0152089,0.0152661,0.0153195,0.0153692,0.0154151,0.0154572,0.0154955,0.01553,0.0155607,0.0155875,0.0156106,0.0156298,0.0156452,0.0156567,0.0156644,0.0156683,0.0156683,0.0156644,0.0156567,0.0156452,0.0156298,0.0156106,0.0155875,0.0155607,0.01553,0.0154955,0.0154572,0.0154151,0.0153692,0.0153195,0.0152661,0.0152089,0.015148,0.0150834,0.015015,0.014943,0.0148673,0.014788,0.0147051,0.0146185,0.0145283,0.0144346,0.0143373,0.0142365,0.0141322,0.0140245,0.0139133,0.0137987,0.0136807,0.0135593,0.0134346,0.0133066,0.0131753,0.0130409,0.0129032,0.0127623,0.0126183,0.0124712,0.0123211,0.0121679,0.0120117,0.0118526,0.0116906,0.0115257,0.011358,0.0111874,0.0110142,0.0108382,0.0106596,0.0104784,0.0102945,0.0101082,0.00991937,0.00972811,0.00953447,0.00933848,0.0091402,0.00893968,0.00873696,0.00853209,0.00832513,0.00811613,0.00790514,0.0076922,0.00747738,0.00726072,0.00704227,0.0068221,0.00660026,0.00637679,0.00615176,0.00592521,0.00569722,0.00546782,0.00523708,0.00500506,0.00477181,0.00453738,0.00430184,0.00406525,0.00382766,0.00358912,0.00334971,0.00310948,0.00286848,0.00262677,0.00238443,0.00214149,0.00189803,0.00165411,0.00140978,0.0011651,0.00092014,0.000674961,0.000429647,0.00018459};

	double a = 0.0;
	double b = 100.0;
	int n = 200;
	double width = 0.5*(b - a);
	double mean = 0.5*(a + b);
	double gaussLegendre = 0;
        for(int step = 1; step <= n; step++) {
            gaussLegendre += Weight[step]*valuemerton(S,X,tau,r,sigma,lambda,muj,sigmaj,width*Root[step] + mean);
        }
        return  gaussLegendre*width;
}
//
//
class Merton{
//
//
protected:
//
  	double S;
  	double X;
 	double tau;
  	double r;
  	double sigma;
  	double lambda;
  	double muj;
  	double sigmaj;
	//
	//
public:
	//
	//
	//
  	__host__ __device__ Merton(double S,double X,double tau,double r,double sigma,double lambda,double muj,double sigmaj)
  	{
	  	//
		//
	  	this->S = S;
	  	this->X = X;
	  	this->tau = tau;
	  	this->r = r;
	  	this->sigma = sigma;
	  	this->lambda = lambda;
	  	this->muj = muj;
	  	this->sigmaj = sigmaj;
	  	//
  	}
  	//
  	//
	//
	__host__ __device__ double callprice()
	{ 
		double prob = integratemerton(this->S,this->X,this->tau,this->r,this->sigma,this->lambda,this->muj,this->sigmaj);
        	return this->S - exp(-this->r*this->tau)*this->X*(0.5 + prob/M_PI);
	}
	//
	//
	__host__ __device__ double putprice()
	{
        	double prob = integratemerton(this->S,this->X,this->tau,this->r,this->sigma,this->lambda,this->muj,this->sigmaj);
      		return  exp(-this->r*this->tau)*this->X*(0.5 - prob/M_PI);
	}
	//
  	//
};


#endif
